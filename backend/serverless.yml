org: rebhartell
app: serverless-whatever-app
service: serverless-whatever-service

variablesResolutionMode: 20210326 # update variable resolution to future release operation
configValidationMode: error       # https://www.serverless.com/framework/docs/deprecations/#CONFIG_VALIDATION_MODE_DEFAULT

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-jetpack
  - serverless-prune-plugin
#  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resources section below. For example, 
  # ${self:provider.environment.WHATEVER_ATTACHMENTS_S3_BUCKET}
  environment:
    CATEGORY_DB_TABLE: category-table-${self:provider.stage}
    CATEGORY_DB_INDEX: category-index-${self:provider.stage}
    WHATEVER_DB_TABLE: whatever-table-${self:provider.stage}
    WHATEVER_DB_INDEX: whatever-index-${self:provider.stage}
    # the name of this S3 bucket must be unique within the whole aws
    WHATEVER_ATTACHMENTS_S3_BUCKET: whatever-attachments-rebh-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v2.0.0
        title: serverless-whatever-app
        description: Serverless application for Whatever You Want items

  prune:
    automatic: true
    number: 2

  webpack:
    concurrency: 3 # desired concurrency, defaults to the number of available cores
    serializedCompile: false # backward compatible, true translates to concurrency: 1    

#  logs:
    # Enable API Gateway logs
#    restApi: true

#  iam:
#    role:
#      statements:
#        - Effect: Allow
#          Action:
#            - xray:PutTelemetryRecords
#            - xray:PutTraceSegments
#          Resource: "*"


functions:

  # The Auth0 authorizer
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Retrieve all Whatever items
  GetAllWhatever:
    handler: src/lambda/http/getAllWhatever.handler
    events:
      - http:
          method: get
          path: whatever
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WHATEVER_DB_TABLE}/index/${self:provider.environment.WHATEVER_DB_INDEX}

  # Get a Whatever item
  GetWhatever:
    handler: src/lambda/http/getWhatever.handler
    events:
      - http:
          method: get
          path: whatever/{itemId}
          cors: true
          authorizer: Auth               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WHATEVER_DB_TABLE}

  # Create a Whatever item
  CreateWhatever:
    handler: src/lambda/http/createWhatever.handler
    events:
      - http:
          method: post
          path: whatever
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-whatever-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WHATEVER_DB_TABLE}

  # Update a Whatever item
  UpdateWhatever:
    handler: src/lambda/http/updateWhatever.handler
    events:
      - http:
          method: patch
          path: whatever/{itemId}
          cors: true
          authorizer: Auth        
          request:
            schemas:
              application/json: ${file(models/update-whatever-request.json)}           
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WHATEVER_DB_TABLE}

  # Delete a Whatever item
  DeleteWhatever:
    handler: src/lambda/http/deleteWhatever.handler
    events:
      - http:
          method: delete
          path: whatever/{itemId}
          cors: true
          authorizer: Auth            
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WHATEVER_DB_TABLE}

  # Generate an attachment upload URL
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: whatever/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WHATEVER_DB_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.WHATEVER_ATTACHMENTS_S3_BUCKET}/*'

  # Retrieve all Category items
  GetAllCategory:
    handler: src/lambda/http/getAllCategory.handler
    events:
      - http:
          method: get
          path: category
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_DB_TABLE}/index/${self:provider.environment.CATEGORY_DB_INDEX}

  # Get a Category item
  GetCategory:
    handler: src/lambda/http/getCategory.handler
    events:
      - http:
          method: get
          path: category/{itemId}
          cors: true
          authorizer: Auth               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_DB_TABLE}

  # Create a Category item
  CreateCategory:
    handler: src/lambda/http/createCategory.handler
    events:
      - http:
          method: post
          path: category
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-category-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_DB_TABLE}

  # Update a Category item
  UpdateCategory:
    handler: src/lambda/http/updateCategory.handler
    events:
      - http:
          method: patch
          path: category/{itemId}
          cors: true
          authorizer: Auth        
          request:
            schemas:
              application/json: ${file(models/update-category-request.json)}           
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_DB_TABLE}

  # Delete a Category item
  DeleteCategory:
    handler: src/lambda/http/deleteCategory.handler
    events:
      - http:
          method: delete
          path: category/{itemId}
          cors: true
          authorizer: Auth            
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_DB_TABLE}

resources:
  Resources:
    
    # API Gateway default 4xx response
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # The Whatever DynamoDB Table
    WhateverDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: dueDate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WHATEVER_DB_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.WHATEVER_DB_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: dueDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # The Whatever attachments S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.WHATEVER_ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # The Whatever attachments S3 Bucket Policy
    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: AttachmentsBucketPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.WHATEVER_ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # The Category DynamoDB Table
    CategoryDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CATEGORY_DB_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CATEGORY_DB_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
