{
	"info": {
		"_postman_id": "a6a7f2a9-03b6-455a-9ad3-ed7ad29a6144",
		"name": "Udacity - Project Cloud Capstone - Whatever",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Whatever",
			"item": [
				{
					"name": "Get all whatever",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Whatever items are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"});",
									"",
									"pm.test(\"First Whatever item has expected fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData['items'].length > 0) {",
									"        var item0 = jsonData['items'][0];",
									"        pm.expect(item0).to.have.property('createdAt');",
									"        pm.expect(item0).to.have.property('itemId');",
									"        pm.expect(item0).to.have.property('name');",
									"        pm.expect(item0).to.have.property('done');",
									"        pm.expect(item0).to.have.property('dueDate');",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create whatever",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PRE-SET VARIABLES",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// LOAD VARIABLES",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"itemId\", jsonData.item.itemId);",
									"",
									"// TESTS",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Whatever item is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"});",
									"",
									"pm.test(\"Whatever item has expected fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData['item']) {",
									"        var item = jsonData['item'];",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('itemId');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('done');",
									"        pm.expect(item).to.have.property('dueDate');",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomVerb}} {{$randomNoun}}\",\n\t\"dueDate\": \"{{randomDueDate}}\"\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get whatever",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Whatever item is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"});",
									"",
									"pm.test(\"Whatever item has expected fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData['item']) {",
									"        var item = jsonData['item'];",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('itemId');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('done');",
									"        pm.expect(item).to.have.property('dueDate');",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update whatever",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PRE-SET VARIABLES",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Body is empty\", function () {",
									"    pm.response.to.have.body(\"\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomVerb}} {{$randomNoun}}\",\n\t\"dueDate\": \"{{randomDueDate}}\",\n\t\"done\": false\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get attachment upload URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// SET VARIABLES",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"uploadAttachmentUrl\", jsonData.uploadUrl);",
									"",
									"var uploadUrl = jsonData.uploadUrl.split(\"?\");",
									"pm.collectionVariables.set(\"getAttachmentUrl\", uploadUrl[0]);",
									"",
									"",
									"// TESTS",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"message 'Invalid response body' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uploadUrl');",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/{{itemId}}/attachment",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								"{{itemId}}",
								"attachment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload attachment Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is empty\", function () {",
									"    pm.response.to.have.body(\"\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/rebh/Development/udacity-aws-cloud-developer-project-5/UPLOADS/car.jpg"
							}
						},
						"url": {
							"raw": "{{uploadAttachmentUrl}}",
							"host": [
								"{{uploadAttachmentUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get attachment Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// When run as a collection the test is run before the image has actually",
									"// loaded so the test fails",
									"// Run the command manually and the test works",
									"// pm.test('Content-Type\", \"image/jpeg\"', function () {",
									"//     pm.response.to.be.header(\"Content-Type\", \"image/jpeg\")",
									"// });",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{getAttachmentUrl}}",
							"host": [
								"{{getAttachmentUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete whatever",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Body is empty\", function () {",
									"    pm.response.to.have.body(\"\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Whatever - bad validation",
			"item": [
				{
					"name": "Create whatever - bad 'name'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"message 'Invalid request body' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"\",\n\t\"dueDate\": \"{{randomDueDate}}\"\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create whatever - bad 'dueDate'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"message 'Invalid request body' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Valid name\",\n\t\"dueDate\": \"Invalid dueDate should match 2021-07-18\"\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update whatever - bad 'name'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PRE-SET VARIABLES",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"message 'Invalid request body' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"\",\n\t\"dueDate\": \"{{randomDueDate}}\",\n\t\"done\": false\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update whatever - bad 'dueDate'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PRE-SET VARIABLES",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"message 'Invalid request body' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Invalid request body\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Valid name\",\n\t\"dueDate\": \"Invalid dueDate should match 2021-07-18\",\n\t\"done\": false\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Whatever - no auth",
			"item": [
				{
					"name": "Get all whatever - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"message 'Unauthorized' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get whatever - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"message 'Unauthorized' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create whatever - no auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PRE-SET VARIABLES",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"message 'Unauthorized' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomVerb}} {{$randomNoun}}\",\n\t\"dueDate\": \"{{randomDueDate}}\"\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update whatever - no auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// PRE-SET VARIABLES",
									"const fromTime = new Date().getTime();",
									"const SEVEN_DAYS_IN_MSECS = 7 * 24 * 60 * 60 * 1000;",
									"const randomDueDate = (new Date(fromTime + Math.random() * SEVEN_DAYS_IN_MSECS)).toISOString().substring(0,10);",
									"",
									"pm.collectionVariables.set(\"randomDueDate\", randomDueDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"message 'Unauthorized' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomVerb}} {{$randomNoun}}\",\n\t\"dueDate\": \"{{randomDueDate}}\",\n\t\"done\": false\n}"
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get attachment upload URL - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"message 'Unauthorized' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/{{itemId}}/attachment",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								"{{itemId}}",
								"attachment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete whatever - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTS",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"message 'Unauthorized' is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/whatever/:itemId",
							"protocol": "https",
							"host": [
								"{{apiId}}",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"whatever",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiId",
			"value": "3z1u9ycjug"
		},
		{
			"key": "authToken",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik03OGRwVnEyWDlha3lydU9yWjVLdiJ9.eyJpc3MiOiJodHRwczovL2Rldi01aXR0MnlsMi5ldS5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjBlMDk0ZmQ2YzA3ZTEwMDY4N2RiODk4IiwiYXVkIjoiRXU5YWNJbkNQc3QyQ1ZmTmFpZ2l2Y2ZQbnlVVWNYak4iLCJpYXQiOjE2Mjg3ODIzMjQsImV4cCI6MTYyOTA4MjMyNCwiYXRfaGFzaCI6ImpfZUNXVmFuSml6M1hGdTFCMUxYZFEiLCJub25jZSI6InJ1WVRqU0lxRUFmWHBxX2h-Vmw2NzN5R1ZlaGRFb0l4In0.dpby9yRhfCKzJHSPX4I34CPXlXW44dJbzgL9KM2LURKngO1EuD3UyIhfP6dtvDRKjjoKvJWwNtKOfo2-8J5EiwtrescN5tlYxwYhr10qVQ5ejbcsHrEwA-7vzw1MBbTxGjEBk0BgT6eOIzkOZJIAJ7HSp6ZFFtBShdeJynq0u5ANUw1zhxTVlc_BmnWnrfxUPLgKwgteWOmswHX5CJvkW-56VHSEb_4MfPjI_JO41ufU2y0lRskvJtg7N6rorM8YU628rDYVblWUNFphAd_p8-Ou_NdRuJSEtaejf1HNPbX9ADuhAis0cUELpG1i2LJiE1hEINMlkxBkvJlYUq_lSw"
		},
		{
			"key": "randomDueDate",
			"value": ""
		},
		{
			"key": "itemId",
			"value": ""
		},
		{
			"key": "uploadAttachmentUrl",
			"value": ""
		},
		{
			"key": "getAttachmentUrl",
			"value": ""
		}
	]
}